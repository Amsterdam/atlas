import React from 'react'
import {
  getMapBaseLayers as fetchBaseLayers,
  getPanelLayers as fetchPanelLayers,
  getMapLayers as fetchMapLayers,
} from '../../../map/services'
import {
  encodeLayers,
  decodeLayers,
  encodeLocation,
  decodeLocation,
  encodeBounds,
  decodeBounds,
} from '../../../store/queryParameters'
import getState from '../../../shared/services/redux/get-state'
import MapPage from './MapPage'
import MapContext, {
  MapContextProps,
  MapState,
  initialState,
  ActiveMapLayer,
  MapLayer,
  Location,
  Geometry,
  Overlay,
  DrawingGeometry,
} from './MapContext'
import MAP_CONFIG from '../../../map/services/map.config'
import { createUrlWithToken } from '../../../shared/services/api/api'
import getParam from '../../utils/getParam'
import PARAMETERS from '../../../store/parameters'

function setParams(param: string, value: string) {
  if (typeof window !== 'undefined') {
    const searchParams = new URLSearchParams(window.location.search)
    searchParams.set(param, value)

    window.history.pushState(
      {},
      '',
      decodeURIComponent(`${window.location.pathname}?${searchParams.toString()}`),
    )
  }
}

// Add more autogenerated types
type Action =
  | { type: 'setActiveBaseLayer'; payload: string }
  | { type: 'getBaseLayers'; payload: Array<Object> }
  | { type: 'getPanelLayers'; payload: Array<Object> }
  | { type: 'getMapLayers'; payload: Array<MapLayer> }
  | { type: 'setActiveMapLayers'; payload: Array<ActiveMapLayer> }
  | { type: 'setVisibleMapLayer'; payload: ActiveMapLayer }
  | { type: 'setOverlays'; payload: Array<Overlay> }
  | { type: 'setLocation'; payload: Location }
  | { type: 'setDetailUrl'; payload: string }
  | { type: 'setGeometry'; payload: Geometry }
  | { type: 'setDrawingGeometry'; payload: DrawingGeometry }

const reducer = (state: MapState, action: Action): MapState => {
  switch (action.type) {
    case 'setActiveBaseLayer':
      return {
        ...state,
        activeBaseLayer: action.payload,
      }
    case 'getBaseLayers':
      return {
        ...state,
        baseLayers: action.payload,
      }
    case 'getPanelLayers':
      return {
        ...state,
        panelLayers: action.payload,
      }
    case 'getMapLayers':
      return {
        ...state,
        mapLayers: action.payload,
      }
    case 'setActiveMapLayers':
      // TODO: simplify this in the new MapPanel
      return {
        ...state,
        activeMapLayers: state.activeMapLayers.some((overlay) =>
          action.payload.map(({ id }) => id).includes(overlay.id),
        )
          ? [
              ...state.activeMapLayers.filter((overlay) => {
                return !action.payload.map(({ id }) => id).includes(overlay.id)
              }),
            ]
          : [
              ...state.activeMapLayers,
              ...action.payload.map(({ id: mapLayerId, isVisible }) => ({
                id: mapLayerId,
                isVisible,
              })),
            ],
      }
    case 'setVisibleMapLayer':
      // TODO: simplify this in the new MapPanel
      return {
        ...state,
        activeMapLayers: state.activeMapLayers.map((overlay) => ({
          ...overlay,
          isVisible:
            overlay.id === action.payload.id ? action.payload.isVisible : overlay.isVisible,
        })),
      }
    case 'setOverlays':
      return {
        ...state,
        overlays: action.payload,
      }
    case 'setLocation':
      return {
        ...state,
        location: action.payload,
      }
    case 'setDetailUrl':
      return {
        ...state,
        detailUrl: action.payload,
      }
    case 'setGeometry':
      return {
        ...state,
        geometry: action.payload,
      }
    case 'setDrawingGeometry':
      return {
        ...state,
        drawingGeometry: action.payload,
      }
    default:
      return state
  }
}

const MapContextProvider: React.FC<MapContextProps> = ({ children }) => {
  const [state, dispatch] = React.useReducer(reducer, initialState)

  function setActiveBaseLayer(payload: string) {
    dispatch({ type: 'setActiveBaseLayer', payload })
    setParams(PARAMETERS.MAP_BACKGROUND, payload)
  }

  // Add auto type generation
  function setActiveMapLayers(payload: Array<ActiveMapLayer>) {
    dispatch({ type: 'setActiveMapLayers', payload })
  }

  function setVisibleMapLayer(id: string, isVisible: boolean) {
    dispatch({ type: 'setVisibleMapLayer', payload: { id, isVisible: !isVisible } })
    setParams('lagen', encodeLayers([...state.activeMapLayers, { id, isVisible: !isVisible }]))
  }

  function setLocation(payload: Location | null) {
    dispatch({ type: 'setLocation', payload })

    if (payload) setParams(PARAMETERS.LOCATION, encodeLocation(payload))
  }

  function setDetailUrl(payload: string) {
    dispatch({ type: 'setDetailUrl', payload })
    setParams('detailUrl', payload)
  }

  function setGeometry(payload: Geometry) {
    if (payload.type && payload.coordinates) {
      dispatch({ type: 'setGeometry', payload })
    }
  }

  function setDrawingGeometry(payload: DrawingGeometry) {
    dispatch({ type: 'setDrawingGeometry', payload })

    if (payload) setParams(PARAMETERS.DRAWING_GEOMETRY, encodeBounds(payload))
  }

  async function getBaseLayers() {
    const baseLayers = (await fetchBaseLayers()) as Array<{ category: string }> // Add auto type generation

    dispatch({
      type: 'getBaseLayers',
      // @ts-ignore auto generate types
      payload: baseLayers.reduce(
        (result, item) => ({
          ...result,
          // @ts-ignore auto generate types
          [item.category]: result[item.category] ? [...result[item.category], item] : [item],
        }),
        {},
      ),
    })
  }

  async function getPanelLayers() {
    const panelLayers = await fetchPanelLayers()

    dispatch({
      type: 'getPanelLayers',
      payload: panelLayers,
    })
  }

  async function getMapLayers() {
    const mapLayers = await fetchMapLayers()

    dispatch({
      type: 'getMapLayers',
      payload: mapLayers,
    })
  }

  function findLayer(layers: Array<MapLayer>, id: string): MapLayer | undefined {
    return layers.find((mapLayer) => {
      const mapLayerId = id.split('-')

      // The ID of the mapLayer when defined as part of a collection or as legendItem, is a combination of the IDs of the mapLayer and the collection it's used in
      return mapLayer.id === (mapLayerId[1] || mapLayerId[0])
    })
  }

  function getOverlays() {
    const { user } = getState()
    const { activeMapLayers, mapLayers } = state

    const overlays = activeMapLayers
      .map((activeMapLayer) => {
        const mapLayer = findLayer(mapLayers, activeMapLayer.id)
        if (!mapLayer) {
          return false
        }

        const mapLayerUrl = mapLayer.external
          ? mapLayer.url
          : `${MAP_CONFIG.OVERLAY_ROOT}${mapLayer.url}`

        if (!mapLayer.authScope) {
          return {
            ...mapLayer,
            url: mapLayerUrl,
            overlayOptions: {
              ...MAP_CONFIG.OVERLAY_OPTIONS,
              layers: mapLayer.layers,
            },
          }
        }

        if (user.token) {
          return {
            ...mapLayer,
            url: createUrlWithToken(mapLayerUrl, user.token),
            overlayOptions: {
              ...MAP_CONFIG.OVERLAY_OPTIONS,
              layers: mapLayer.layers,
            },
          }
        }
        return false
      })
      .filter((layer) => layer)

    dispatch({
      type: 'setOverlays',
      payload: overlays,
    })
  }

  // Load the state from the query parameters
  const activeMapLayers = getParam(PARAMETERS.LAYERS)
  const location = getParam(PARAMETERS.LOCATION)
  const detailUrl = getParam('detailUrl')
  const baseLayer = getParam(PARAMETERS.MAP_BACKGROUND)
  const drawingGeometry = getParam(PARAMETERS.DRAWING_GEOMETRY)

  React.useEffect(() => {
    if (baseLayer) setActiveBaseLayer(baseLayer)
    if (activeMapLayers) setActiveMapLayers(decodeLayers(activeMapLayers))
    // @ts-ignore fix the destruction of the location from the url
    if (location) setLocation(decodeLocation(location))
    if (detailUrl) setDetailUrl(detailUrl)
    if (drawingGeometry) setDrawingGeometry(decodeBounds(drawingGeometry))
  }, [baseLayer, activeMapLayers, location, detailUrl, drawingGeometry])

  // This can be refactored if the mapLayers are added in batches
  React.useEffect(() => {
    if (state.activeMapLayers.length) setParams('lagen', encodeLayers(state.activeMapLayers))
  }, [state.activeMapLayers])

  return (
    <MapContext.Provider
      value={{
        ...state,
        setActiveBaseLayer,
        setActiveMapLayers,
        setVisibleMapLayer,
        setLocation,
        setDetailUrl,
        setGeometry,
        setDrawingGeometry,
        getBaseLayers,
        getPanelLayers,
        getMapLayers,
        getOverlays,
      }}
    >
      {children}
    </MapContext.Provider>
  )
}

const MapContainer: React.FC<{}> = () => (
  // @ts-ignore find out the problem
  <MapContextProvider>
    <MapComponent />
  </MapContextProvider>
)

const MapComponent = () => {
  const { getBaseLayers, getPanelLayers, getMapLayers } = React.useContext(MapContext)

  React.useEffect(() => {
    getBaseLayers()
    getPanelLayers()
    getMapLayers()
  }, [])

  return <MapPage />
}

export default MapContainer
