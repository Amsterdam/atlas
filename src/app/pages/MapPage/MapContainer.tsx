import React from 'react'
import MapPanel from '../../../map/containers/panel/MapPanel'
import {
  getMapBaseLayers as fetchBaseLayers,
  getPanelLayers as fetchPanelLayers,
  getMapLayers as fetchMapLayers,
} from '../../../map/services'
import { encodeLayers, decodeLayers } from '../../../store/queryParameters'
import getState from '../../../shared/services/redux/get-state'
import MapPage from './MapPage'
import MapContext, { MapContextProps, MapStateProps, initialState } from './MapContext'
import MAP_CONFIG from '../../../map/services/map.config'
import { createUrlWithToken } from '../../../shared/services/api/api'

function setQueryStringParameter(name: string, value: string) {
  const params = new URLSearchParams(window.location.search)

  params.set(name, value)

  window.history.pushState({}, '', decodeURIComponent(`${window.location.pathname}?${params}`))
}

export function getQueryStringParameter(name: string) {
  const params = new URLSearchParams(window.location.search)
  return params.get(name)
}

export function getActiveBaseLayer() {
  return getQueryStringParameter('achtergrond') || 'topografie'
}

// Add more autogenerated types
type Action = { type: string; payload: Object | Array<Object> }

const reducer = (state: MapStateProps, action: Action): MapStateProps => {
  switch (action.type) {
    case 'setActiveBaseLayer':
      return {
        ...state,
        activeBaseLayer: action.payload,
      }
    case 'getBaseLayers':
      return {
        ...state,
        baseLayers: action.payload,
      }
    case 'getPanelLayers':
      return {
        ...state,
        panelLayers: action.payload,
      }
    case 'getMapLayers':
      return {
        ...state,
        mapLayers: action.payload,
      }
    case 'setActiveMapLayers':
      // TODO: simplify this in the new MapPanel
      return {
        ...state,
        activeMapLayers: state.activeMapLayers.some((overlay) =>
          action.payload.map(({ id }) => id).includes(overlay.id),
        )
          ? [
              ...state.activeMapLayers.filter((overlay) => {
                return !action.payload.map(({ id }) => id).includes(overlay.id)
              }),
            ]
          : [
              ...state.activeMapLayers,
              ...action.payload
                .reverse()
                .map(({ id: mapLayerId, isVisible }) => ({ id: mapLayerId, isVisible })),
            ],
      }
    case 'setVisibleMapLayers':
      // TODO: simplify this in the new MapPanel
      return {
        ...state,
        activeMapLayers: state.activeMapLayers.map((overlay) => ({
          ...overlay,
          isVisible:
            overlay.id === action.payload.mapLayerId ? action.payload.isVisible : overlay.isVisible,
        })),
      }
    case 'setMapPanelVisible':
      return {
        ...state,
        isMapPanelVisible: action.payload,
      }
    case 'setOverlays':
      return {
        ...state,
        overlays: action.payload,
      }
    default:
      return state
  }
}

const MapContextProvider: React.FC<MapContextProps & { children: React.ReactNode }> = ({
  children,
}) => {
  const [state, dispatch] = React.useReducer(reducer, initialState)

  function setActiveBaseLayer(payload: string) {
    if (typeof window !== 'undefined') {
      setQueryStringParameter('achtergrond', payload)
    }

    dispatch({ type: 'setActiveBaseLayer', payload })
  }

  // Add auto type generation
  function setActiveMapLayers(payload: Array<Object>) {
    dispatch({ type: 'setActiveMapLayers', payload })
  }

  function setVisibleMapLayers(mapLayerId: string, isVisible: boolean) {
    dispatch({ type: 'setVisibleMapLayers', payload: { mapLayerId, isVisible: !isVisible } })
  }

  function setMapPanelVisible() {
    if (typeof window !== 'undefined') {
      setQueryStringParameter('legenda', state.isMapPanelVisible ? 'false' : 'true')
    }

    dispatch({ type: 'setMapPanelVisible', payload: !state.isMapPanelVisible })
  }

  async function getBaseLayers() {
    const baseLayers = (await fetchBaseLayers()) as Array<{ category: string }> // Add auto type generation

    dispatch({
      type: 'getBaseLayers',
      payload: baseLayers.reduce(
        (result, item) => ({
          ...result,
          [item.category]: result[item.category] ? [...result[item.category], item] : [item],
        }),
        {},
      ),
    })
  }

  async function getPanelLayers() {
    const panelLayers = await fetchPanelLayers()

    dispatch({
      type: 'getPanelLayers',
      payload: panelLayers,
    })
  }

  async function getMapLayers() {
    const mapLayers = await fetchMapLayers()

    dispatch({
      type: 'getMapLayers',
      payload: mapLayers,
    })
  }

  function findLayer(layers: Array<{ id: string }>, id: string): Object | undefined {
    return layers.find((mapLayer) => {
      const mapLayerId = id.split('-')

      // The ID of the mapLayer when defined as part of a collection or as legendItem, is a combination of the IDs of the mapLayer and the collection it's used in
      return mapLayer.id === (mapLayerId[1] || mapLayerId[0])
    })
  }

  function generateLayer(layers, overlay, url, params, type, bounds) {
    return {
      ...overlay,
      url,
      overlayOptions: {
        ...MAP_CONFIG.OVERLAY_OPTIONS,
        layers: findLayer(layers, overlay.id).layers,
      },
      type,
      params,
      bounds,
    }
  }

  function getOverlays() {
    const { user } = getState()
    const { activeMapLayers, mapLayers } = state

    const overlays = activeMapLayers
      .map((activeMapLayer) => {
        const mapLayer = findLayer(mapLayers, activeMapLayer.id)
        if (!mapLayer) {
          return false
        }

        const mapLayerUrl = mapLayer.external
          ? mapLayer.url
          : `${MAP_CONFIG.OVERLAY_ROOT}${mapLayer.url}`

        if (!mapLayer.authScope) {
          console.log(
            'hiii',
            generateLayer(
              mapLayers,
              activeMapLayer,
              mapLayerUrl,
              mapLayer.params,
              mapLayer.type,
              mapLayer.bounds,
            ),
          )

          return generateLayer(
            mapLayers,
            activeMapLayer,
            mapLayerUrl,
            mapLayer.params,
            mapLayer.type,
            mapLayer.bounds,
          )
        }

        if (user.token) {
          return generateLayer(
            mapLayers,
            mapLayer,
            createUrlWithToken(mapLayerUrl, user.token),
            mapLayer.params,
            mapLayer.type,
            mapLayer.bounds,
          )
        }
        return false
      })
      .filter((layer) => layer)

    dispatch({
      type: 'setOverlays',
      payload: overlays,
    })
  }

  // Update the state from the url with the maplayers
  // React.useEffect(() => {
  //   if (typeof window !== 'undefined') {
  //     const activeMapLayers = getQueryStringParameter('lagen')

  //     setActiveMapLayers(decodeLayers(activeMapLayers))
  //   }
  // }, [window.location.search])

  React.useEffect(() => {
    if (typeof window !== 'undefined') {
      const isMapPanelVisible = getQueryStringParameter('legenda')

      setMapPanelVisible(isMapPanelVisible)
    }
  }, [window.location.search])

  // Update the url with the maplayers
  React.useEffect(() => {
    if (typeof window !== 'undefined') {
      if (state.activeMapLayers.length > 0)
        setQueryStringParameter('lagen', encodeLayers(state.activeMapLayers))
    }
  }, [state.activeMapLayers])

  return (
    <MapContext.Provider
      value={{
        ...state,
        setActiveBaseLayer,
        setActiveMapLayers,
        setVisibleMapLayers,
        setMapPanelVisible,
        getBaseLayers,
        getPanelLayers,
        getMapLayers,
        getOverlays,
      }}
    >
      {children}
    </MapContext.Provider>
  )
}

const MapContainer: React.FC<{}> = () => (
  <MapContextProvider>
    <MapComponent />
  </MapContextProvider>
)

const MapComponent = () => {
  const { getBaseLayers, getPanelLayers, getMapLayers } = React.useContext(MapContext)

  React.useEffect(() => {
    getBaseLayers()
    getPanelLayers()
    getMapLayers()
  }, [])

  return <MapPage />
}

export default MapContainer
