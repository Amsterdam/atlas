import { Geometry } from 'geojson'
import React, { useMemo, useState } from 'react'
import { useSelector } from 'react-redux'
import {
  getMapLayers as fetchMapLayers,
  getPanelLayers as fetchPanelLayers,
} from '../../../map/services'
import MapContext, { initialState, MapContextProps, MapLayer, MapState } from './MapContext'
import MapPage from './MapPage'
import useParam from '../../utils/useParam'
import { mapLayersParam, polygonParam, polylineParam } from '../../query-params'
import { getUser } from '../../../shared/ducks/user/user'
import getLeafletLayers from './utils/getLeafletLayers'

// Add more autogenerated types
type Action =
  | { type: 'getPanelLayers'; payload: Array<Object> }
  | { type: 'getMapLayers'; payload: Array<MapLayer> }
  | { type: 'setDetailUrl'; payload: string | null }
  | { type: 'setGeometry'; payload: Geometry }

const reducer = (state: MapState, action: Action): MapState => {
  switch (action.type) {
    case 'getPanelLayers':
      return {
        ...state,
        panelLayers: action.payload,
      }
    case 'getMapLayers':
      return {
        ...state,
        mapLayers: action.payload,
      }

    case 'setDetailUrl':
      return {
        ...state,
        detailUrl: action.payload,
      }
    case 'setGeometry':
      return {
        ...state,
        geometry: action.payload,
      }

    default:
      return state
  }
}

const MapContainer: React.FC<MapContextProps> = ({ children }) => {
  const [state, dispatch] = React.useReducer(reducer, initialState)
  const [activeMapLayers] = useParam(mapLayersParam)
  const [polyline] = useParam(polylineParam)
  const [polygon] = useParam(polygonParam)
  const [showDrawTool, setShowDrawTool] = useState(!!(polyline || polygon))
  const user = useSelector(getUser)

  const legendLeafletLayers = useMemo(
    () => (activeMapLayers ? getLeafletLayers(activeMapLayers, state.mapLayers, user) : []),
    [activeMapLayers, state.mapLayers, user],
  )

  function setDetailUrl(payload: string | null) {
    dispatch({ type: 'setDetailUrl', payload })
  }

  function setGeometry(payload: Geometry) {
    dispatch({ type: 'setGeometry', payload })
  }

  async function getPanelLayers() {
    const panelLayers = await fetchPanelLayers()

    dispatch({
      type: 'getPanelLayers',
      payload: panelLayers,
    })
  }

  async function getMapLayers() {
    const mapLayers = await fetchMapLayers()

    dispatch({
      type: 'getMapLayers',
      payload: mapLayers,
    })
  }

  const [polygons] = useParam(polygonParam)
  const [polylines] = useParam(polylineParam)

  const showDrawContent = useMemo(() => !!(polygons?.length || polylines?.length), [
    polygons,
    polylines,
  ])

  React.useEffect(() => {
    getPanelLayers()
    getMapLayers()
  }, [])

  return (
    <MapContext.Provider
      value={{
        ...state,
        legendLeafletLayers,
        setDetailUrl,
        setGeometry,
        getPanelLayers,
        getMapLayers,
        showDrawTool,
        setShowDrawTool,
        showDrawContent,
      }}
    >
      <MapPage>{children}</MapPage>
    </MapContext.Provider>
  )
}

export default MapContainer
