// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConstructionFilesContainer should render 1`] = `
<DefaultThemeProvider>
  <ThemeProvider
    theme={
      Object {
        "breakpoints": Object {
          "desktop": [Function],
          "desktopL": [Function],
          "laptop": [Function],
          "laptopL": [Function],
          "laptopM": [Function],
          "mobileL": [Function],
          "mobileM": [Function],
          "mobileS": [Function],
          "tabletM": [Function],
          "tabletS": [Function],
        },
        "colors": Object {
          "bright": Object {
            "main": "#ffffff",
          },
          "error": Object {
            "main": "#ec0000",
          },
          "primary": Object {
            "dark": "#00387a",
            "main": "#004699",
          },
          "secondary": Object {
            "dark": "#bc0000",
            "main": "#ec0000",
          },
          "support": Object {
            "focus": "#FEC813",
            "invalid": "#EC0000",
            "valid": "#00A03C",
          },
          "tint": Object {
            "level1": "#ffffff",
            "level2": "#F5F5F5",
            "level3": "#E6E6E6",
            "level4": "#B4B4B4",
            "level5": "#767676",
            "level6": "#323232",
            "level7": "#000000",
          },
        },
        "globalStyle": "",
        "layouts": Object {
          "big": Object {
            "columns": 6,
            "gutter": 24,
            "margin": 24,
            "max": 1024,
            "min": 768,
          },
          "large": Object {
            "columns": 12,
            "gutter": 24,
            "margin": 32,
            "max": 1200,
            "min": 1024,
          },
          "medium": Object {
            "columns": 2,
            "gutter": 20,
            "margin": 20,
            "max": 768,
            "min": 414,
          },
          "small": Object {
            "columns": 1,
            "margin": 20,
            "max": 414,
          },
          "xLarge": Object {
            "columns": 12,
            "gutter": 24,
            "margin": 44,
            "min": 1200,
          },
        },
        "maxGridWidth": 1430,
        "typography": Object {
          "a": Object {
            "defaultColor": "#000000",
            "fontSize": "1rem",
            "fontWeight": "inherit",
            "letterSpacing": "inherit",
            "lineHeight": 1.25,
            "marginBottom": "0",
          },
          "em": Object {
            "defaultColor": "#000000",
            "fontSize": "16px",
            "fontWeight": 400,
            "letterSpacing": "inherit",
            "lineHeight": 1.25,
            "marginBottom": "0",
          },
          "fontFamily": "Avenir Next, Arial, sans-serif",
          "fontSize": "16px",
          "h1": Object {
            "breakpoints": Object {
              "tabletS": Object {
                "fontSize": "30px",
                "lineHeight": "38px",
              },
            },
            "defaultColor": "#000000",
            "fontSize": "24px",
            "fontWeight": 700,
            "letterSpacing": "inherit",
            "lineHeight": "30px",
            "marginBottom": "0",
          },
          "h2": Object {
            "breakpoints": Object {
              "tabletS": Object {
                "fontSize": "24px",
                "lineHeight": "30px",
              },
            },
            "defaultColor": "#000000",
            "fontSize": "20px",
            "fontWeight": 700,
            "letterSpacing": "inherit",
            "lineHeight": "28px",
            "marginBottom": "8px",
          },
          "h3": Object {
            "defaultColor": "#000000",
            "fontSize": "20px",
            "fontWeight": 700,
            "letterSpacing": "inherit",
            "lineHeight": "28px",
            "marginBottom": "8px",
          },
          "h4": Object {
            "defaultColor": "#000000",
            "fontSize": "18px",
            "fontWeight": 700,
            "letterSpacing": "inherit",
            "lineHeight": "25px",
            "marginBottom": "8px",
          },
          "h5": Object {
            "defaultColor": "#000000",
            "fontSize": "18px",
            "fontWeight": 400,
            "letterSpacing": "inherit",
            "lineHeight": 1,
            "marginBottom": "0",
          },
          "h6": Object {
            "defaultColor": "#000000",
            "fontSize": "16px",
            "fontWeight": 500,
            "letterSpacing": "inherit",
            "lineHeight": 1.25,
            "marginBottom": "0",
          },
          "p": Object {
            "breakpoints": Object {
              "tabletS": Object {
                "marginBottom": "24px",
              },
            },
            "defaultColor": "#000000",
            "fontSize": "16px",
            "fontWeight": 400,
            "letterSpacing": "inherit",
            "lineHeight": "22px",
            "marginBottom": "20px",
          },
          "small": Object {
            "defaultColor": "#000000",
            "fontSize": "14px",
            "fontWeight": 400,
            "letterSpacing": "inherit",
            "lineHeight": "18px",
            "marginBottom": "0",
          },
          "span": Object {
            "defaultColor": "#000000",
            "fontSize": "14px",
            "fontWeight": 400,
            "letterSpacing": "inherit",
            "lineHeight": "18px",
            "marginBottom": "0",
          },
        },
      }
    }
  >
    <Connect(ConstructionFilesContainer)
      fileName="foo"
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <ConstructionFilesContainer
        dispatch={[Function]}
        endpoint="https://acc.api.data.amsterdam.nl/stadsarchief/bouwdossier/12/"
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
        storeSubscription={
          Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          }
        }
        user={
          Object {
            "scopes": Array [
              "BD/R",
            ],
          }
        }
      >
        <styled.div
          direction="column"
          gutterX={20}
          gutterY={20}
        >
          <StyledComponent
            direction="column"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-Rmtcm",
                  "isStatic": false,
                  "lastClassName": "kUjrlu",
                  "rules": Array [
                    "
  display: flex;
  flex-direction: ",
                    [Function],
                    ";
  flex-wrap: ",
                    [Function],
                    ";
  ",
                    [Function],
                    "

  ",
                    [Function],
                    "

  ",
                    ".sc-csuQGl",
                    " {
    ",
                    [Function],
                    "

    ",
                    [Function],
                    "
  }
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-Rmtcm",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            gutterX={20}
            gutterY={20}
          >
            <div
              className="sc-Rmtcm kUjrlu"
              direction="column"
            >
              <styled.div>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-csuQGl",
                        "isStatic": false,
                        "lastClassName": "cdSrAo",
                        "rules": Array [
                          "
  position: relative;
  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-csuQGl",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="sc-csuQGl cdSrAo"
                  >
                    <LoadingIndicator
                      IconComponent={
                        <Spinner
                          color="secondary"
                          size={36}
                        />
                      }
                    >
                      <div
                        className="loading-indicator"
                      >
                        <Spinner
                          color="secondary"
                          size={36}
                        >
                          <styled.div
                            size={36}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-btzYZH",
                                    "isStatic": false,
                                    "lastClassName": "gUyeZb",
                                    "rules": Array [
                                      "
  @keyframes rotating {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  width: ",
                                      [Function],
                                      "px;
  height: ",
                                      [Function],
                                      "px;

  & svg {
    animation: rotating 1s linear infinite;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-btzYZH",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              size={36}
                            >
                              <div
                                className="sc-btzYZH gUyeZb"
                                size={36}
                              >
                                <Icon
                                  color="secondary"
                                  size={36}
                                >
                                  <styled.span
                                    color="secondary"
                                    size={36}
                                  >
                                    <StyledComponent
                                      color="secondary"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bxivhb",
                                            "isStatic": false,
                                            "lastClassName": "etLEqh",
                                            "rules": Array [
                                              "
  display: ",
                                              [Function],
                                              ";
  ",
                                              [Function],
                                              "
  ",
                                              [Function],
                                              "
  ",
                                              [Function],
                                              ";
  box-sizing: content-box;
  ",
                                              [Function],
                                              ";

  & > svg {
    width: inherit;
    height: inherit;
  }
  
  ",
                                              [Function],
                                              ";
",
                                            ],
                                          },
                                          "displayName": "styled.span",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-bxivhb",
                                          "target": "span",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      size={36}
                                    >
                                      <span
                                        className="sc-bxivhb etLEqh"
                                        color="secondary"
                                        size={36}
                                      >
                                        <SvgSpinner>
                                          <svg
                                            focusable={false}
                                            viewBox="0 0 100 100"
                                          >
                                            <path
                                              d="M50 100C22.4 99.967.033 77.6 0 50h10c0 22.091 17.909 40 40 40s40-17.909 40-40-17.909-40-40-40V0c27.614 0 50 22.386 50 50s-22.386 50-50 50z"
                                            />
                                          </svg>
                                        </SvgSpinner>
                                      </span>
                                    </StyledComponent>
                                  </styled.span>
                                </Icon>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Spinner>
                      </div>
                    </LoadingIndicator>
                  </div>
                </StyledComponent>
              </styled.div>
            </div>
          </StyledComponent>
        </styled.div>
      </ConstructionFilesContainer>
    </Connect(ConstructionFilesContainer)>
  </ThemeProvider>
</DefaultThemeProvider>
`;
