import { batenCategories, batenCategoryLabels, kostenCategories, kostenCategoryLabels } from '../categories';
import { displayFactor, precisionRound } from '../helpers';

const parseData = (data, categories, categoryLabels) => (
  categories.map((category) => {
    const item = data.categories[category] || {};

    const begroot = Math.abs(item.begroot || 0);
    const begrootValue = begroot / displayFactor;
    const begrootRounded = precisionRound(begrootValue, 1);
    const begrootTooSmallLabel = begrootValue ? '<0,05' : '';
    const begrootLabel = begrootRounded ? `${begrootRounded}`.replace('.', ',') : begrootTooSmallLabel;

    const geboekt = Math.abs(item.geboekt || 0);
    const geboektValue = geboekt / displayFactor;
    const geboektRounded = precisionRound(geboektValue, 1);
    const geboektTooSmallLabel = geboektValue ? '<0,05' : '';
    const geboektLabel = geboektRounded ? `${geboektRounded}`.replace('.', ',') : geboektTooSmallLabel;

    return {
      begroot,
      geboekt,
      id: category,
      name: categoryLabels[category],
      begrootLabel,
      begrootValue,
      // Displaying a zero value label for 'geboekt', depending on the rounded 'begroot' value, this
      // is intentional
      geboektLabel: begrootRounded && !geboektLabel ? '0' : geboektLabel,
      geboektValue
    };
  })
);

const generateGraphData = ({ baten, kosten }) => ({
  baten: parseData(baten.totaal, batenCategories, batenCategoryLabels),
  kosten: parseData(kosten.totaal, kostenCategories, kostenCategoryLabels)
});

const getMax = ({ baten: { max_jaren_axis_begroot } }) => {
  // eslint-disable-next-line camelcase
  const test = Math.round(max_jaren_axis_begroot / displayFactor);
  debugger;
  return test;
}

export {
  generateGraphData,
  getMax
};
