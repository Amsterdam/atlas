import grondexploitatieCategoriesInOrder, { CATEGORIES } from '../grondexploitatie-categories';

import generateGraphData, { generateValue, getDefaultCategories, getAllYears, mergeYears, sortYears } from './grafiek-gefaseerde-begroting.service';

describe('Grondexploitatie Grafiek Totale Begroting Service', () => {
  describe('generateValue', () => {
    it('should return the correct value', () => {
      const value = generateValue(0);
      expect(value).toEqual({
        value: 0
      });
    });

    it('should return the correct value', () => {
      const value = generateValue(5000000);
      expect(value).toEqual({
        value: 5
      });
    });
  });

  describe('getDefaultCategories', () => {
    it('should return a object with the correct categories as key', () => {
      const defaultCategories = getDefaultCategories();
      grondexploitatieCategoriesInOrder.forEach((item) => {
        expect(item in defaultCategories).toBe(true);
      });
    });

    it('should add a default value to the categories', () => {
      const defaultCategories = getDefaultCategories();
      expect(defaultCategories[CATEGORIES.HOTEL]).toEqual({
        value: 0
      });
    });
  });

  const mockApiData = [
    {
      categorie: CATEGORIES.BEDRIJFSRUIMTE,
      jaren: [
        { start: '2018', end: '2018', begroot: 1000000 },
        { start: '2018', end: '2020', begroot: 2000000 }
      ]
    },
    {
      categorie: CATEGORIES.KANTOORRUIMTE,
      jaren: [
        { start: '2018', end: '2018', begroot: 1000000 },
        { start: '2020', end: '2030', begroot: 2000000 }
      ]
    }
  ];

  const years = [
    { [CATEGORIES.BEDRIJFSRUIMTE]: { value: 1 }, name: '2018' },
    { [CATEGORIES.BEDRIJFSRUIMTE]: { value: 2 }, name: '2018 - 2020' },
    { [CATEGORIES.KANTOORRUIMTE]: { value: 1 }, name: '2018' },
    { [CATEGORIES.KANTOORRUIMTE]: { value: 2 }, name: '2020 - 2030' }
  ];

  describe('getAllYears', () => {
    it('should get all the years from the categories array', () => {
      const defaultCategories = getAllYears(mockApiData);
      expect(defaultCategories).toEqual(years);
    });
  });

  describe('mergeYears', () => {
    it('should not have duplicate years', () => {
      const mergedYears = mergeYears(years);
      const filtered = mergedYears.filter((year) => year.name === '2018');
      expect(filtered).toHaveLength(1);
    });

    it('every year should have all the categories as a key', () => {
      const mergedYears = mergeYears(years);
      mergedYears.forEach((year) => {
        grondexploitatieCategoriesInOrder.forEach((category) => {
          expect(category in year).toBe(true);
        });
      });
    });

    it('should have the right value', () => {
      const mergedYears = mergeYears(years);
      expect(mergedYears[0][CATEGORIES.KANTOORRUIMTE].value).toBe(1);
      expect(mergedYears[0][CATEGORIES.HOTEL].value).toBe(0);
    });
  });

  describe('sortYears', () => {
    it('should sort the array correctly', () => {
      const unsortedYears = [
        { name: '2019 - 2020' },
        { name: '2020 - 2030' },
        { name: '2018' }
      ];
      const sortedYears = sortYears(unsortedYears);
      expect(sortedYears[0].name).toBe('2018');
      expect(sortedYears[1].name).toBe('2019 - 2020');
      expect(sortedYears[2].name).toBe('2020 - 2030');
    });
  });

  describe('generateGraphData', () => {
    it('should return the data of each year in correctly', () => {
      const graphData = generateGraphData(mockApiData);

      expect(graphData[0][CATEGORIES.KANTOORRUIMTE]).toEqual({
        value: 1
      });

      expect(graphData[1][CATEGORIES.KANTOORRUIMTE]).toEqual({
        value: 0
      });

      expect(graphData[2][CATEGORIES.KANTOORRUIMTE]).toEqual({
        value: 2
      });
    });

    it('should return the data of each year in correctly - KANTOORRUIMTE', () => {
      const graphData = generateGraphData(mockApiData);

      expect(graphData[0][CATEGORIES.KANTOORRUIMTE]).toEqual({
        value: 1
      });

      expect(graphData[1][CATEGORIES.KANTOORRUIMTE]).toEqual({
        value: 0
      });

      expect(graphData[2][CATEGORIES.KANTOORRUIMTE]).toEqual({
        value: 2
      });
    });

    it('should return the data of each year in correctly - BEDRIJFSRUIMTE', () => {
      const graphData = generateGraphData(mockApiData);

      expect(graphData[0][CATEGORIES.BEDRIJFSRUIMTE]).toEqual({
        value: 1
      });

      expect(graphData[1][CATEGORIES.BEDRIJFSRUIMTE]).toEqual({
        value: 2
      });

      expect(graphData[2][CATEGORIES.BEDRIJFSRUIMTE]).toEqual({
        value: 0
      });
    });

    it('should return the data of each year in correctly - default', () => {
      const graphData = generateGraphData(mockApiData);

      expect(graphData[0][CATEGORIES.MIDDELDURE_HUUR]).toEqual({
        value: 0
      });

      expect(graphData[1][CATEGORIES.MIDDELDURE_HUUR]).toEqual({
        value: 0
      });

      expect(graphData[2][CATEGORIES.MIDDELDURE_HUUR]).toEqual({
        value: 0
      });
    });
  });
});
